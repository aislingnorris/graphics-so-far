#version 330

in vec3 vertex_position;
in vec3 vertex_normal;

uniform mat4 proj, view, model;
vec3 position_eye, normal_eye;

// fixed point light properties
//vec3 light_position_world = vec3 (0.0, 40.0, 2.0);
uniform vec3 light_position_world;

vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light colour
vec3 La = vec3 (0.2, 0.2, 0.2); // ambient colour

// surface reflectance
vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
//vec3 Kd = vec3 (0.0, 0.0, 1.0); //diffuse surface
uniform vec3 Kd;

//reflectance
vec3 Ka = vec3 (1.0, 1.0, 1.0); // fully reflect ambient light
float specular_exponent = 100.0; // specular 'power'
out vec4 fragment_colour; // final colour of surface


void main () {

	mat4 ModelViewMatrix = view * model;
	mat3 NormalMatrix =  mat3(ModelViewMatrix);

	vec3 N = normalize( NormalMatrix * vertex_normal);

	

	position_eye = vec3 (ModelViewMatrix * vec4 (vertex_position, 1.0));
	normal_eye = vec3 (ModelViewMatrix * vec4 (vertex_normal, 0.0));
	gl_Position = proj * vec4 (position_eye, 1.0);

	vec3 s = normalize(vec3(light_position_world - position_eye));

	// ambient intensity
	vec3 Ia = La * Ka;

	// diffuse intensity
	// raise light position to eye space
	vec3 light_position_eye = vec3 (view * vec4 (light_position_world, 1.0));
	vec3 L = normalize (light_position_eye - position_eye);
	float dot_prod = max(dot (L, N), 0.0);
	vec3 Id = Ld * Kd * dot_prod; // final diffuse intensity

	// specular intensity
	vec3 R = reflect (-L, N);
	vec3 V = normalize (-position_eye);
	float dot_prod_specular = max(dot (R, V), 0.0);
	float specular_factor = pow (dot_prod_specular, specular_exponent);
	vec3 Is = Ls * Ks * specular_factor; // final specular intensity

	// final colour
	fragment_colour = vec4 (Is + Id + Ia, 1.0);
}